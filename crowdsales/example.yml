mainnet:
    team_multisig:
        address:
    preico:
        address:

# A testnet deployment for the crowdsale contracts
unit_test:
    # The address used to deploy contracts
    # Must be configured on Geth
    chain: ropsten
    deploy_address: "" # This will be dynamically set by the testing code
    verify_on_etherscan: no
    contracts:
        team_multisig:
            contract_name: Wallet
            contract_file: Wallet.sol
            arguments:
                _owners:
                    - "0x4fa6fb927f525265233cd5da32baa11dff7fcdc1"
                    - "0xaa7b03923ad7dc65c8a4bbcd8c51e5956c7d3252"
                _required: 2
                _daylimit: 0
        preico:
            contract_name: PresaleFundCollector
            contract_file: PresaleFundCollector.sol
            arguments:
                _owner: "{{contracts.team_multisig.address}}"
                _freezeEndsAt: "{{ time() + 30*24*3600 }}"
                _weiMinimumLimit: "{{ to_wei(750, 'ether') }}"
        token:
            contract_name: CrowdsaleToken
            contract_file: CrowdsaleToken.sol
            arguments:
                _name: Example-testnet
                _symbol: EXA
                _initialSupply: 0
        pricing_strategy:
            contract_name: MilestonePricing
            contract_file: MilestonePricing.sol
            arguments:
                _preicoPrice: "{{ to_wei('0.08', 'ether') }}"
                _preicoContractAddress: "{{contracts.preico.address}}"
                _milestones:
                    - 1492272000
                    - "{{Â to_wei('0.010', 'ether') }}"
                    - 1492876800
                    - "{{ to_wei('0.011', 'ether') }}"
                    - 1493481600
                    - "{{ to_wei('0.012', 'ether') }}"
                    - 1494691200
                    - "{{ to_wei('0.013', 'ether') }}"
        crowdsale:
            contract_name: MintedTokenCappedCrowdsale
            contract_file: MintedTokenCappedCrowdsale.sol
            arguments:
                _token: "{{contracts.token.address}}"
                _pricingStrategy: "{{contracts.pricing_strategy.address}}"
                _multisigWallet: "{{contracts.team_multisig.address}}"
                _start: "{{ timestamp(datetime(2017, 4, 15, 16, 0)) }}"
                _end: "{{ timestamp(datetime(2017, 4, 15, 16, 0)) + 30*24*3600 }}"
                _minimumFundingGoal: 7500
                _maximumTokensSold: 4000000
        finalize_agent:
            contract_name: BonusFinalizeAgent
            contract_file: BonusFinalizeAgent.sol
            arguments:
                _token: "{{contracts.token.address}}"
                _crowdsale: "{{contracts.crowdsale.address}}"
                _bonusBasePoints: 2500
                _teamMultisig: "{{contracts.team_multisig.address}}"
    # Post-deployment actions to orchestrate everything together
    post_actions: |
        # Allow crowdsale to create new tokens on go as people deposit
        token.transact({"from": deploy_address}).setMintAgent(crowdsale.address, True)

        # Set post-success crowdsale actions to mint tokens for bounties and team
        token.transact({"from": deploy_address}).setMintAgent(finalize_agent.address, True)
        crowdsale.transact({"from": deploy_address}).setFinalizeAgent(finalize_agent.address)
        token.transact({"from": deploy_address}).setReleaseAgent(finalize_agent.address)

        # At the end of the deployment, make team_multisig owner of everything
        crowdsale.transact({"from": deploy_address}).transferOwnership(team_multisig.address)
        token.transact({"from": deploy_address}).transferOwnership(team_multisig.address)

    # Make sure that everything we have deployed all contracts in good state
    # and their internal state is sane
    verify_actions: |
        assert token.call().owner() == team_multisig.address
        assert crowdsale.call().owner() == team_multisig.address
        assert preico.call().owner() == team_multisig.address
        assert finalize_agent.call().teamMultisig() == team_multisig.address
        assert finalize_agent.call().isSane()
        assert crowdsale.call().getState() == CrowdsaleState.PreFunding
