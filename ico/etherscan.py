"""etherscan.io utilities."""

import time

from populus import Project

from ico.importexpand import expand_contract_imports


def verify_contract(project: Project, chain_name: str, address: str, contract_name, contract_filename: str, constructor_args: str, libraries: dict, optimization=True, compiler: str="v0.4.8+commit.60cc1668"):
    """Semi-automated contract verified on Etherscan.

    Uses a web browser + Selenium auto fill to verify contracts.

    See the page in action: https://etherscan.io/verifyContract?a=0xcd111aa492a9c77a367c36e6d6af8e6f212e0c8e
    """

    try:
        from splinter import Browser
    except ImportError:
        raise RuntimeError("Splinter package must be installed for verification automation")

    src, imported_files = expand_contract_imports(project, contract_filename)

    if chain_name == "mainnet":
        url = "https://etherscan.io/verifyContract"
    elif chain_name == "ropsten":
        url = "https://ropsten.etherscan.io/verifyContract"
    else:
        raise RuntimeError("Unknown chain")

    with Browser() as browser:
        browser.visit(url)

        browser.fill("ctl00$ContentPlaceHolder1$txtContractAddress", address)
        browser.fill("ctl00$ContentPlaceHolder1$txtContractName", contract_name)
        browser.select("ctl00$ContentPlaceHolder1$ddlCompilerVersions", compiler)
        browser.select("ctl00$ContentPlaceHolder1$ddlOptimization",  "1" if optimization else "0")
        #browser.fill("ctl00$ContentPlaceHolder1$txtSourceCode", src)
        browser.find_by_name("ctl00$ContentPlaceHolder1$txtSourceCode").first.value = src
        browser.fill("ctl00$ContentPlaceHolder1$txtConstructorArguements", constructor_args)

        idx = 1
        for library_name, library_address in libraries.items():
            browser.fill("ctl00$ContentPlaceHolder1$txtLibraryAddress{}".format(idx),library_address)
            browser.fill("ctl00$ContentPlaceHolder1$txtLibraryName{}".format(idx), library_name)
            idx += 1

        browser.find_by_name("ctl00$ContentPlaceHolder1$btnSubmit").click()

        deadline = time.time() + 60

        print("Waiting EtherScan to process the contract verification")
        while time.time() < deadline:
            if browser.is_text_present("Successfully generated ByteCode and ABI for Contract Address", wait_time=1):
                return

            if browser.is_text_present("already been verified"):
                print("The contract has already been verified")
                return

            time.sleep(1.0)

        print("Contract verification failed. Check the browser for details.")
        input("Press enter to continue")
